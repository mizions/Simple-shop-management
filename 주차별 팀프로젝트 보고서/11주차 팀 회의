11주차는 디자인 패턴에 관하여 개인 조사 및 공부를 하였다.

10주차까지 오픈소스의 코드분석을 마쳤고, shopmanagement라는 오픈소스가 어떠한 구조로 이루어져 있고 어떠한 기능들을 하는지 알게 되었다.

본래 계획대로 다음 순차는 디자인패턴 적용이며, 우선 디자인 패턴에 대한 팀원 개인의 이해도가 낮다고 판단하였다.

그래서 11주차는 디자인 패턴에 대한 개인 조사시간을 가졌으며, 조사 목적은

1. 디자인 패턴이란 무엇인가?
2. 디자인 패턴에는 어떤 것들이 있는가?
3. shopmanagement에 적용할 디자인 패턴으로는 어떤 디자인 패턴이 적합한가?
 3-1) 적용한다면 어떻게 적용될지
 3-2) 해당 디자인 패턴에 대한 이해도 높이기

이다.




최호준 팀원의 개인 자료정리)


디자인 패턴이란
생략 (참고 : https://github.com/geunkim/CPPLectures/pull/58)



사용 목적
기존 코드의 문제점 개선 혹은 효율적인 협업을 위해
즉, 객체지향의 원칙인 추상화, 캡슐화, 다형성이 잘 지켜졌는지.



그렇다면 기존 프로젝트의 문제점은?
1. 멤버 변수가 전부 public -> 캡슐화 무시
2. getter와 setter(mutator와 accessor)가 무겁다 -> 속도 지연 발생
3. 유효성 검사 미흡
4. 코드 간결화,가독성 떨어짐 등등 -> 협업 시에 장애가 된다



적용할 수 있는 패턴

카테고리 분류할 때 -> composite 패턴
직관적인 인터페이스 위해 -> façade 패턴
Iterator 패턴 <- 몬함
기타 기능에 필요성으로 인해 -> command 패턴, memento 패턴
상점에 특성을 주기위해 ( ex. mmorpg 상점 ) -> state 패턴
Visitor 패턴 <- 얘도 거의 불가능
