/*

6주차(3회차) 팀 회의 내용 요약



전체적인 코드 대력적 분석 _________________________________________________


 초반 계획시 파트를 나누어 조원들에게 분배한뒤, 코드를 분석해오는 형식을 취하려 하였으나,
부분적으로 파트를 나누며 대략적 분석을 해본 결과, 앞의 내용부터 순차적으로 분석하는 것이 적합하다고 판단하였다.
 또한 대략적인 코드의 분석 내용은 다음과 같다.

1: 공부가 필요한 새로운 헤더파일이 있음
   (리스트 : fstream ,cstdlib, stdio.h)

2: 파일 입출력 기능인 ifstream, ofstream이 있음 (헤더파일 : fstream)

3: 추상 클래스(virtul class) 개념 등장
 
 따라서 우리 팀은 simple shop management 소스코드 이해에 필요한 언어 지식의 범위에 한하여 범위를 나누었으며,
주차별로 개인적인 공부와 코드분석을 한 후, 짧은 개인 보고서를 제출하여 공유하고
서로의 이해를 도우며 분석해나가는 방식을 취하기로 하였다.

 나누었던 파트는 주석을 달아서 레포지토리에 개별적으로 업로드하였다.
 
 

 6주차 개인 분석 범위 _________________________________________________
 
 소스코드에 들어가는 헤더파일들의 개념과 기능 분석, 특히 파일 입출력 기능인 fstream은 해당 오픈소스에
중요 기능이기 때문에 충분한 이해도를 가져야함
(~ 소스코드 7번줄)



개인 분석 내용_________________________________________________



최호준 개인 제출 보고서 내용 ...

fstream이란?
자주 사용하는 객체에 대한 클래스에 대해 C++ 라이브러리에 미리 정의해 놓은 클래스 중 파일 처리를 담당하는 클래스

- 출력 : ofstream
1) 클래스 정보가 담긴 fstream 헤더를 include 한다
2) 출력 내용을 파일 객체로 전달한다
3) 출력 객체 생성 -> 파일 열기(open()) -> 출력하기
4) 파일 사용 후 파일 닫기 (close())

ex)
ofstream 출력객체;
출력객체.open(”출력할 파일 이름”);
출력객체 << 출력 내용;
출력객체.close();


기존의 출력 코드와 비교
(실제 코딩과 컴파일을 하였음)


- 입력 : ifstream
1) 클래스 정보가 담긴 fstream 헤더를 include 한다
2) 입력 내용을 파일 객체에서 입력받는다
3) 입력 객체 생성 -> 파일 열기(open()) -> 입력하기
4) 파일 사용 후 파일 닫기 (close())

ex)
ifstream 입력객체;
입력할 파일의 자료형(int,char,등등..) 변수이름;
입력객체.open(”입력할 파일 이름”);
입력객체 >> 입력내용을 저장한 변수 << endl;
입력객체.close();


기존의 입력 코드와 비교
(실제 코딩과 컴파일을 하였음)


읽기와 쓰기 모두 : fstream
fstream(파일이름, 모드 : (ios :: in| ios :: out))

그 외 상태 플래그들은 shop management.cpp에서 사용하지 않기 때문에 생략!


_________________________________________________
김보명 개인 제출 보고서 내용 ...

#include<fstream>
* 외부 파일에 저장된 시퀀스에 대한 입출력 작업을 지원하는 여러 클래스를 정의
* ifstream -> 스트림 버퍼에서 인코딩된 객체의 추출을 제어
open, is_open, close, get 함수 등을 포함
* ostream ->  스트림 버퍼에 인코딩된 객체 삽입을 제어
open, is_open, close, write 함수 등을 포함
* 파일 쓰기 -> ofstream 객체명("파일명");
* 파일 읽기 -> ifstream 객체명("파일명");

#include<iostream>
* 프로그램에서 입출력을 수행하기 위한 헤더 파일 

#include<string>
* 문자열을 담는 클래스

#include<cstdlib>
* 범용적으로 사용되는 동적 할당 관련 함수, 난수 생성 함수, 정수의 연산 함수, 검색 및 정렬 함수 등

#include <cstring>
* 표준 C 라이브러리 헤더 <string.h>를 포함. C 배열 기반의 문자열을 가지고 함수를 구현.

#include<stdio.h>
* C 언어의 표준 라이브러리 함수의 매크로 정의, 상수, 여러 형의 입출력 함수가 포함된 헤더 파일


_________________________________________________
김성주 개인 제출 보고서 내용 ...

오픈소스 조사 [shopping Management open sorce]

<fstream> : 이 클래스의 오브젝트는 파일버프 객체를 내부 스트림 버퍼로 유지하며, 이 버퍼가 연결된 파일(있는 경우)에서 입력/출력 작업을 수행.

<iostream> : (기본) 문자 시퀀스의 입력을 읽고 해석 가능 .

<string> : Strings (header)
  - 문자열을 담는 클래스 

<cstdlib> : C Standard General Utilities Library (header) 
  - 동적 메모리 관리, 난수 생성, 환경과의 통신, 정수산술, 
   검색, 정렬 및 변환을 포함한 몇 가지 범용 기능을 정의.
-  유틸리티 함수들을 모아 놓은 헤더파일

<cstring> : C Strings (header) 
  - 이 헤더 파일은 C 문자열과 배열을 조작하는 몇 가지 기능을 정의.
  -  CStringData 개체에 문자 데이터를 보관.
  - CStringNULL로 종료되는 C 스타일 문자열을 허용.



fastream? 
: 파일 스트림은 기본적인 istream 이나 ostream 클래스 보다 더 지원하는 기능이 더 많기 때문에 이를 상속받아서 작성되었으며, 
각각을 상속받은 것이 ifstream 과 ofstream이다. 
이들 클래스를 모두 포함하는 라이브러리로 fstream을 사용하면 된다.


Ifstream (Input file stream)
: 파일로부터 어떠한 것들을 가지고 와서 프로그램에 입력할 수 있게 도와주는 클래스
ifstream = file -> program

(open 함수)
void open (const char* fileName, ios_base::openmode mode = ios_base::in); // open할 파일 이름
void open (const string& fileName, ios_base::openmode mode = ios_base::in); // 오픈할 파일을 사용할 모드 정함

ios_base::in – 파일을 읽을 목적으로 열 것이다.
ios_base::out - 파일에 작성할 목적으로 열 것이다.
ios_base::binary - 파일을 이진수 형태로 열 것이다.

(is_open 함수)
bool is_open() const;
: 기존의 istream 에는 없고 ifstream 에서 상속받으면서 추가된 함수이다. 
파일이 열렸는지의 유무를 리턴합니다. 
만일 해당 경로에 있는 파일이 존재하지 않는다면 false를 리턴.

(close 함수)
void close();
: 파일과의 연결을 닫아버리는 함수이다.

(get 함수)
istream& get (char& c);
: 읽은 파일에서 한char 단위로 매개변수로 넣은 c에 넣어주는 함수이다.

스트림에서 문자들을 가져온 뒤,  C 형식 문자열로 저장한다. 문자는 제한 문자 '\n' 이 나올 때 까지나, n - 1 개의 문자를 받을 때 까지 입력 받게 된다. 
또한 입력 작업 시 오류가 발생할 경우 또한 중단되게 된다. 또한 이 함수는 제한 문자는 스트림에서 빼내지 않기 때문에 만일 제한 문자를 스트림에서 빼내 
버리기 위해서는 getline과 같은 함수를 이용해야만 한다.
맨 마지막에는 자동으로 널 문자(NULL)가 붙여지게 된다.

(getline 함수)
istream& getline(char* str, streamsize len);
: 한 줄씩 문자열을 읽어서 str에 저장해주는 함수이다.
한 줄의 기준은 '\n' 문자열의 끝을 알리는 개행 문자가 올때까지, 혹은 파일의 끝을 알리는 EOF를 만날 때 까지이다.

※ getline 함수는 개행 문자 (혹은 지정한 문자) 가 나오기 전에 지정한 버퍼의 크기가 다 차게 된다면 failbit를 키게 되므로 버퍼의 크기를 너무 작게 
만든다면 정상적으로 데이터를 받을 수 없습니다. 따라서 getline 을 사용하기 전에 이와 같은 조건을 꼭 확인해야 한다.
*Failbt : 이 플래그들은 입력 작업 시 파일 끝에 도달하기 전에 오류가 발생할 시 설정되는 플래그 들이다.

(eof 함수)
bool eof() const;
파일의 끝이 나오면 true를 반환하고 아니면 false를 반환한다.
eof() 함수가 불리면 커서의 위치를 확인하는 내부 로직에 의해서 파일의 끝에 도착했는지 아닌지를 판단한다.

ofstream (output file stream)
: 프로그램의 출력을 파일에 할 수 있게 돕는 클래스
ofstream = program -> file

(open 함수)
void open (const char* fileName, ios_base::openmode mode = ios_base::out); // 파일 이름이다.
void open (const string& fileName, ios_base::openmode mode = ios_base::out); // out으로 매개변수 default가 정해져 있는 것을 볼 수 있다.

(is_open 함수)
bool is_open() const;
파일이 열렸는지 확인하는 함수이다.

(close 함수)
void close();
파일과의 연결을 닫아버리는 함수이다.

(write 함수)
ostream& write(const char* str, streamsize n);
첫번째 매개변수로 받은 캐릭터 포인터 타입의 문자열의 n만큼의 길이만큼 파일에 wrtie하는 함수이다.

<ofstream 작성 순서 (요약)>
① ofstream형 객체를 선언한다.

② 내용을 파일에 출력한다.

③ 파일을 닫는다. (*중요)
안 한다고 해서 바로 눈에 보이는 문제점은 없지만, 충분히 어떤 에러를 유발할 수 있으므로 사용 후엔 꼭 닫아 준다.

**istream의 getline도 사용하기 좋지만, std::getline이 string 타입으로 읽을 수 있기 때문에 사용하기 좋다..

<출처>
https://modoocode.com/215
https://modoocode.com/191
https://modoocode.com/165
https://m.blog.naver.com/PostView.nhn?blogId=kks227&logNo=220224305396&proxyReferer=https:%2F%2Fwww.google.com%2F


_________________________________________________
김수경 개인 제출 보고서 내용 ...


공부 후 작성한 fstream 실습 코드

// ofstream

	ofstream output;
	char cont = 'y';
	char word[50] = { 0, };

	output.open("test.txt");

	if (output.fail())
		return 1;

	while (cont == 'y' || cont == 'Y') {
		cout << "write : ";
		cin >> word;

		output << word << endl;

		cout << "계속?(y/n)" << endl;
		cin >> cont;
	}
	output.close();


결과 : 프로젝트 폴더에 test.txt파일 생성됨. 파일에는 입력한 내용이 입력되고 저장됨.

// ifstream 

ifstream input;
char word[50] = {0,};

input.open("test.txt");
if(input.fail())
return 1;

while (input.eof()==false)
{
input >> word;
cout << word << endl;
}

input.close();

return 0;

결과 : 앞의 코드로 생성된 test.txt 파일을 컴파일할때 읽어 옴을 확인.



종합 요약: 새로운 헤더파일들의 개념을 알아보았다. 특히 fstream에 대해 집중적으로 분석하였으며,
fstream은 ifstream, ofstream을 사용할 수 있게 하고, 이에 대하여 각자 이해한 내용이 전부 동일하였으며 
각자의 공부와 실습을 통하여 fstream에 대한 이해도를 가질 수 있었다.


앞으로의 회의 진행 방식 채택 _________________________________________________

학교의 수업 방식이 블랜디드 형식으로 바뀌며 대면수업시간이 생겼다.
우리 팀은 이를 이용하여 대면 수업 전날인 화요일에 팀 회의를 가지기로 하였으며 전체적 회의 진행은 다음과 같다

화요일: 일정, 방향성 등 기본적인 팀 회의
~ 금요일: 화요일 회의 바탕으로 개인 분석 후 제출

이상 보고서 마침.

*/
