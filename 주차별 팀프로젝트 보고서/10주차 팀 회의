중간 발표를 마친 뒤 교수님의 피드백을 받고 나서 자체적인 팀 회의를 추가적으로 진행하였다.

교수님의 피드백에 따라, 우리는 라이브러리 분석보단 어플리케이션 전체를 만지는 쪽에 가까우므로 목적을 구체화할 필요가 있다는 의견에 팀원 모두 동의하였다.

추가적인 회의에서 팀원과 회의를 진행한 결과, 게입샵 기능의 구현을 최종 목표로 잡는 것이 적당할 것이라고 의견을 좁혔다.



또한 앞으로의 방향성 또한 교수님의 피드백을 반영하여서 새로이 도출해내었다.

1. 라이브러리의 추가
2. 구체화에 따른 디자인패턴 찾기 및 적용


1. 라이브러리의 추가는 지금 우리가 다루고 있는 오픈소스는 현제 우리 팀원이 충분히 다룰수 있을 난이도라 판단하였고, 기능 자체도 굉장이 간단하고 부실한 면이 있기에,
한계가 분명하다. 이를 보완하기 위하여 새로운 라이브러리를 추가하는 것이 어떻겠냐는 의견에 팀원들은 긍정적인 반응을 보였다.

2. 구체화에 따른 디자인패턴 찾기 및 적용은 현제 우리가 다루고 있는 숍 메니지먼트 오픈소스에는 디자인 패턴이 없기 때문에, 팀원들이 따로 디자인패턴에 대하여
개인적인 공부를 해야할 필요가 있으며, 공부를 하고 지금 우리가 다루고 있는 오픈소스에 새로이 디자인패턴을 적용할 필요가 있다.


추가요소에 대한 이야기도 나왔다. 이는 우리가 본래 목표했던 바이며, 현제의 오픈소스의 기능은 굉장히 간단하고 부실하므로, 새로운 기능을 추가하는 것이 좋다고 판단하였다.

새로운 기능은 필드를 이용한 카테고리 분류 등이 제시 되었다.

또한 10주차에는 남아있는 분량의 코드를 전부 개인 분석 하였다.


김보명 개인 코드 분석 중__

amount 클래스: 제품이나 직원의 세부정보에 대해 직접적으로 접근하는 함수를 포함
admin 함수: amount 클래스를 통해 제품이나 직원에 접근하여 총 관리를 하는 함수


최호준 개인 코드 분석 중__

class amount :public staff, public product
{

public:
    void add();          // 137 번줄 정의
    void update_item();  // 166 번줄 정의
    void update_emp();   // 199 번줄 정의

};
void amount::add() // add 함수 정의부
{
    int ch;
    char name[20];
    while (1)
    {
        cout << "1.)Input for product\n2.)Input for employee\n3.)Exit\n";
        cout << "Enter choice\n";
        cin >> ch;
        if (ch == 1) { // 1을 입력받을 경우 상품 정보 입력
            get();
            ofstream x("ooo.txt");
            x << profit;
            x.close();
        }
        else if (ch == 2) {
            getstaff(); // 2를 입력받을 경우 직원 정보 입력
            ofstream x("ooo.txt");
            x << profit;
            x.close();
        }
        else if (ch == 3) // 3을 입력받을 경우 퇴장
            break;
        else // 그 외의 옵션 : 에러 출력
            cout << "Invaid Option. Please re-enter\n";
    }
}

void amount::update_item() // update_item 함수 정의부
{
    char id[20];
    char pid[20];
    char c;
    cout << "\nINPUT product ID to modify\n";
    cin >> id;
    char file[20];
    char file2[20];
    strcpy(file, id); // 입력받은 id 값을 file에 복사
    strcat(file, ".txt");
    fstream fout(file, ios::in | ios::out); // 입,출력용 file 열기
    if (!fout) // fout 객체가 false일 경우. 즉, 존재하지 않을 경우
    {
        cout << "file couldn't be opened. product ID not found. \n";
    }
    else { // fout 객체가 true일 경우 등록된 상품의 정보를 update
        cout << "file found! \n";
        cout << "\nupdate product name: \n";
        cin >> name;
        cout << "\nupdate percost of product: \n";
        cin >> percost;
        cout << "\nupdate persell of product: \n";
        cin >> persell;
        cout << "\nupdate total product quantity: \n";
        cin >> quan;
        cost = percost * quan;
        sell = persell * quan;
        profit = profit + (sell - cost) * 365;
        fout << "\nproduct name: " << name << "\nproduct id: " << id << "\npercost ofproduct: " << percost << "\npersell of product: " << persell << "\nquantity: " << quan << "\n total cost: " << cost << "\nsell: " << sell;
        fout.close();
    }
}

void amount::update_emp() // update_emp 함수 정의부 ( update_item 함수와 같은 맥락 )
{
    char id[20];
    char c;
    cout << "\nINPUT employee ID to modify: ";
    cin >> id;
    char file[20];
    strcpy(file, id);
    strcat(file, ".txt");
    fstream fout(file, ios::in | ios::out);
    if (!fout)
    {
        cout << "file couldn't be opened. product ID not found. \n";
    }
    cout << "modify employee name: \n";
    cin >> post;
    fout << "\nnumber of working employees: " << postquan << "\nemployee salary: " << salary << "\nemployee name :" << post << "\nemployee id: " << empid;
    fout.close();
}

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

void admin() // admin 함수 ( 인터페이스 역할 )
{
    while (1)
    {
        cout << "\n\t\t\t==============================\n";
        cout << "\n\t\t\t     WELCOME TO THE SHOP  \n";
        cout << "\n\t\t\t==============================\n\n";
        cout << "\n\t\t\t* * * * * * * * * * * * * * * *\n";
        cout << "\n\t\t\t1. Add Entries\n\n\t\t\t2. Show profit\n\n\t\t\t3. Search Product Details\n\n\t\t\t4. Search Employee Details\n\n\t\t\t5. Modify Product Details\n\n\t\t\t6. Modify Employee Details\n\n\t\t\t7. Exit\n";
        cout << "\n\n\t\t\tSelect your choice\n";
        int u;
        cin >> u;
        if (u == 1)
        {
            amount a;
            a.show();  // 21번줄 정의
            a.add();   // 137번줄 정의
        }
        else if (u == 2)
        {
            amount d;
            d.show();  // 21번줄 정의
        }
        else if (u == 3)
        {
            char id[20];
            char c;
            cout << "\nINPUT ID to search\n";
            cin >> id;
            char file[20];
            strcpy(file, id);
            strcat(file, ".txt");
            ifstream x(file); // 읽기 전용 <- 수정할 수 없는 패턴 적용
            if (!x)
            {
                cout << "file couldn't be opened. product ID not found. \n";
            }
            while (x)
            {
                x.get(c);   // istream에 포함되어 있는 기능
                cout << c;
            }


            x.close();
        }
        else if (u == 4) // employee 정보 보기
        {
            char eid[20];
            char d;
            cout << "\nINPUT employee ID to search\n";
            cin >> eid;
            char file[20];
            strcpy(file, eid);
            strcat(file, ".txt");
            ifstream y(file); // 마찬가지 읽기 전용
            if (!y)
            {
                cout << "file couldn't be opened. employee ID not found. \n";
            }
            while (y)
            {
                y.get(d);   // istream에 포함되어 있는 기능
                cout << d;
            }

            y.close();
        }
        else if (u == 5) // item 정보 수정
        {
            amount u;
            u.update_item();  // 166번줄 정의
        }
        else if (u == 6) // employee 정보 수정
        {
            amount v;
            v.update_emp();  // 199번줄 정의
        }
        else if (u == 7)
        {
            break;
        }
        else cout << "Invalid option. Please select one of the available options\n";
    }

}
